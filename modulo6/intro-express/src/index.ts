import express from "express";
import cors from 'cors'

const app = express();

app.use(express.json());
app.use(cors())

// Exerc√≠cio 1

// Fa√ßa a instala√ß√£o e configura√ß√£o do Express na pasta do exerc√≠cio. Para testar, crie um endpoint que aponte para a URL base da API. Esse endpoint pode responder apenas com um status ou mensagem fixa.

// app.get("/", (req , res) => {          
//     res.send("Hello from Express")
// })


// Exerc√≠cio 2
// Acesse a API do JSONPlaceholder e observe os endpoints que buscam usu√°rios. No seu projeto, crie uma vari√°vel de tipo para representar esse recurso. Eles devem possuir as seguintes propriedades:

type marvelCharacters = {
    id: number,
    name: string,
    phone: string,
    email: string,
    website: string,

}

// Exerc√≠cio 3

// Crie um array de usu√°rios para servir como base de dados da nossa API. 
// Insira nele quantos objetos quiser, fique √† vontade para explorar sua criatividade üòâ
// N√£o se esque√ßa de fazer a tipagem correta desse array.

const arryMarvel: marvelCharacters[] =[
    {
        id: 1,
        name: "Victor von Doom" ,
        phone: "(789) 87654-0987",
        email: "victor_doom@marvel.com",
        website: "victorvondoom.com" ,
    
    },

    {
        id: 2,
        name: "Capit√£o Am√©rica" ,
        phone: "(616) 87654-0987",
        email: "capit√£oam√©rica@marvel.com",
        website: "capit√£oam√©rica.com" ,
    
    },
    {
        id: 3,
        name: "Victor von Doom" ,
        phone: "(789) 87654-0987",
        email: "victor_doom@marvel.com",
        website: "victorvondoom.com" ,
    
    },
    {
        id: 4,
        name: "Thor" ,
        phone: "(789) 87654-0987",
        email: "thor@marvel.com",
        website: "Thor.com" ,
    
    },
    {
        id: 5,
        name: "Vi√∫va Negra" ,
        phone: "(789) 87654-0987",
        email: "viuva_negra@marvel.com",
        website: "viuvanegra.com" ,
    
    },
    {
        id: 6,
        name: "Vis√£o" ,
        phone: "(789) 87654-0987",
        email: "visao@marvel.com",
        website: "visao.com" ,
    
    },
    {
        id: 7,
        name: "Merc√∫rio" ,
        phone: "(789) 87654-0987",
        email: "mercurio@marvel.com",
        website: "mercurio.com" ,
    
    },
    {
        id: 8,
        name: "Gamora" ,
        phone: "(789) 87654-0987",
        email: "gamora@marvel.com",
        website: "gamora.com" ,
    
    },
    {
        id: 9,
        name: "Groot" ,
        phone: "(789) 87654-0987",
        email: "groot@marvel.com",
        website: "groot.com" ,
    
    },
    {
        id: 10,
        name: "Gavi√£o Arqueiro" ,
        phone: "(789) 87654-0987",
        email: "gaviao_arqueiro@marvel.com",
        website: "gaviaoarqueiro.com" ,
    
    }
    

]


// Exerc√≠cio 4
// Construa um endpoint que retorne os usu√°rios criados no exerc√≠cio anterior.
// Use o JSONPlaceholder como exemplo para o nome da rota e formato da resposta.

app.get("/marvel", (req, res) => {   
    res.send({arryMarvel})       
})
// Exerc√≠cio 5
// Acesse a API do JSONPlaceholder e observe os endpoints que buscam posts. No seu projeto, crie uma vari√°vel de tipo para representar esse recurso. Eles devem possuir as seguintes propriedades:
type Post = {
    id: number,
    title: string,
    body: string,
    userld: number,
}
// Exerc√≠cio 6
// Crie um array de posts para incrementar a base de dados da nossa API. 
// Voc√™ acha melhor cri√°-los dentro ou fora do array de usu√°rios? Justifique com coment√°rios no c√≥digo.
// √© melhor criar fora para mander a organiza√ß√£o do codigo 
// N√£o se esque√ßa de fazer a tipagem correta desse array.

const arryPost: Post [] = [
    {
        id: 1,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 2,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 3,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 4,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 5,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 6,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 7,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 8,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 9,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },
    {
        id: 10,
        title: "Quarteto Fant√°stico",
        body: "Eu nego voc√™, Morte! Victor von Doom n√£o deve morrer!" ,
        userld: 1,
    },

]
// Exerc√≠cio 7
// Construa um endpoint que retorne os posts criados no exerc√≠cio anterior.
// Use o JSONPlaceholder como exemplo para o nome da rota e formato da resposta.

app.get("/post", (req, res) => {   
    res.send({arryPost})       
})

// Exerc√≠cio 8

// Construa um endpoint que retorne os posts de um usu√°rio em particular.
// Use o JSONPlaceholder como exemplo para a constru√ß√£o da rota.
app.get("/usuario/:id", (req, res) => {   
    const id =req.params.id
    const usuarioEspecifico =  arryPost.filter((post) => {
      return 
    })
})


app.listen(3003,() => {
    console.log("Servidor est√° oline na porta 3003")
})