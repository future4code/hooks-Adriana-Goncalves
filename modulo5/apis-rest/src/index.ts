import express, { Request, Response, Express, request } from "express";
import cors from "cors";
import { AddressInfo } from "net";
import { User,TYPE, users  } from "./data";


const app: Express = express();
app.use(express.json());
app.use(cors());

// ExercÃ­cio 1
// Vamos comeÃ§ar fazendo um endpoint que busque todos os usuÃ¡rios de uma lista. A lista estÃ¡ disponÃ­vel abaixo.
// a. Qual mÃ©todo HTTP vocÃª deve utilizar para isso?
// ðŸ‘‰ MÃ©todo get
// ðŸ‘‰ O mÃ©todo GET solicita a representaÃ§Ã£o de um recurso especÃ­fico. RequisiÃ§Ãµes utilizando o mÃ©todo GET devem retornar apenas dados
// a. Qual mÃ©todo HTTP vocÃª deve utilizar para isso?
// ðŸ‘‰ A entendia /users
app.get("/users", (request: Request, response: Response) =>{
    let errorCode = 400
    try {
        if(!users.length){
            errorCode = 404 
            throw new Error("Usuarios nÃ£o encontrados, verificar a documentaÃ§Ã£o")
        }
        response.status(200).send(users)

    } catch(error: any) {
        response.status(errorCode).send(error.message)
    }
})

// ExercÃ­cio 2
// Agora, vamos criar um novo endpoint, que busque todos os usuÃ¡rios que tenham uma propriedade type especÃ­fica, recebendo apenas um type por vez. ApÃ³s isso, responda:
// a. Como vocÃª passou os parÃ¢metros de type para a requisiÃ§Ã£o? Por quÃª?
// b. VocÃª consegue pensar em um jeito de garantir que apenas types vÃ¡lidos sejam utilizados?
app.get("/users/type", (request: Request, response: Response) =>{
    let errorCode = 400
    try {
        const type = request.query.type as string
        if(!type) {
            errorCode = 404
            throw new Error ("Os campos devem ser especificados : 'NORMAL' ou 'ADMIN' ")
        }
        if(type.toLowerCase() !== TYPE.ADMIN.toLowerCase() && TYPE.NORMAL.toLowerCase()){
            errorCode = 404
            throw new Error ("Os campos devem ser especificados : 'NORMAL' ou 'ADMIN' ")
        }

        const userPropriedaType = users.filter(user => user.type.toLowerCase() === type.toLowerCase())

        response.status(200).send(users)

    } catch(error: any) {
        response.status(errorCode).send(error.message)
    }
})

// ExercÃ­cio 3
// Vamos agora praticar o uso de buscas mais variÃ¡veis. FaÃ§a agora um endpoint de busca que encontre um usuÃ¡rio buscando por nome
// a. Qual Ã© o tipo de envio de parÃ¢metro que costuma ser utilizado por aqui?
// b. Altere este endpoint para que ele devolva uma mensagem de erro caso nenhum usuÃ¡rio tenha sido encontrado.

app.get("/users/nome", (request: Request, response: Response) =>{
    let errorCode = 400
    try {
        const name = request.query.name as string

        const user : User| undefined = users.find((user) => user.name === name)

        if (!user) {
            errorCode = 404 
            throw new Error("Nome nÃ£o encontrado")
        }
        response.status(200).send(user)
    } catch(error: any) {
        response.status(errorCode).send(error.message)
    }
})
// ExercÃ­cio 4
// Fizemos algumas buscas no nosso conjunto de itens, agora Ã© hora de adicionar coisas. Comecemos criando um usuÃ¡rio na nossa lista. Crie um endpoint que use o mÃ©todo POST para adicionar um item ao nosso conjunto de usuÃ¡rios.
// a. Mude o mÃ©todo do endpoint para PUT. O que mudou? 
// ðŸ‘‰ NÃ£o mudou nada 
// b. VocÃª considera o mÃ©todo PUT apropriado para esta transaÃ§Ã£o? Por quÃª?
// ðŸ‘‰ NÃ£o, acredito que o mÃ©todo POST sejÃ¡ o mais apropriado para criar algo

app.post("/create-users", (request: Request, response: Response) =>{
    let errorCode = 400
    try {
        const id = request.body.id
        const name = request.body.name
        const email = request.body.email
        const type = request.body.type
        const age = request.body.age
        if (!id) {
            errorCode = 422
            throw new Error("ID deve ser um number")
        }
        if (!name) {
            errorCode = 422
            throw new Error("Name deve ser uma string")
        }
        if (!email) {
            errorCode = 422
            throw new Error("Email deve ser uma string")
        }
        if (!type) {
            errorCode = 422
            throw new Error("Type deve ser uma 'NORMAL' ou 'ADMIN'")
        }
        if (!age) {
            errorCode = 422
            throw new Error("Age deve ser um number")
        }

        const newUser: User = {
            id,
            name,
            email,
            type,
            age
        }
        users.push(newUser)
        response.send("UsuÃ¡rio criado")

    } catch(error: any) {
        response.status(errorCode).send(error.message)
    }
})
app.put("/create-users", (request: Request, response: Response) =>{
    let errorCode = 400
    try {
        const id = request.body.id
        const name = request.body.name
        const email = request.body.email
        const type = request.body.type
        const age = request.body.age
        if (!id) {
            errorCode = 422
            throw new Error("ID deve ser um number")
        }
        if (!name) {
            errorCode = 422
            throw new Error("Name deve ser uma string")
        }
        if (!email) {
            errorCode = 422
            throw new Error("Email deve ser uma string")
        }
        if (!type) {
            errorCode = 422
            throw new Error("Type deve ser uma 'NORMAL' ou 'ADMIN'")
        }
        if (!age) {
            errorCode = 422
            throw new Error("Age deve ser um number")
        }

        const newUser: User = {
            id,
            name,
            email,
            type,
            age
        }
        users.push(newUser)
        response.send("UsuÃ¡rio criado")

    } catch(error: any) {
        response.status(errorCode).send(error.message)
    }
})

const server = app.listen(process.env.PORT || 3003, () => {
    if (server) {
       const address = server.address() as AddressInfo;
       console.log(`Server is running in http://localhost: ${address.port}`);
    } else {
       console.error(`Failure upon starting server.`);
    }
});